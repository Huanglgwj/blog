(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{580:function(_,v,t){"use strict";t.r(v);var a=t(5),e=Object(a.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h2",{attrs:{id:"_1、说一下盒子模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、说一下盒子模型"}},[_._v("#")]),_._v(" 1、说一下盒子模型")]),_._v(" "),t("blockquote",[t("p",[_._v("标准盒模型： 内容区域就是content的所占区域，它的宽 = content的宽，高 = content的高")])]),_._v(" "),t("ul",[t("li",[_._v("在标准盒模型下，修改内边距 padding和边框border会撑大盒子，要注意元素之间的位置")]),_._v(" "),t("li",[_._v("设置标准盒模型，"),t("code",[_._v("box-sizing: content-box")]),_._v("，默认值，不用特意去设置")])]),_._v(" "),t("blockquote",[t("p",[_._v("IE盒模型(怪异盒模型): 内容区域是 content + padding + border，它的宽是三者相加，它的高是三者相加")])]),_._v(" "),t("ul",[t("li",[_._v("在IE盒模型中，修改padding和边框border会向内扩展，故也称内减模式")]),_._v(" "),t("li",[_._v("设置IE盒模型 "),t("code",[_._v("box-sizing: border-box")])])]),_._v(" "),t("h2",{attrs:{id:"_2、说一下-call、apply、bind有什么区别和应用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、说一下-call、apply、bind有什么区别和应用场景"}},[_._v("#")]),_._v(" 2、说一下 "),t("code",[_._v("call")]),_._v("、"),t("code",[_._v("apply")]),_._v("、"),t("code",[_._v("bind")]),_._v("有什么区别和应用场景")]),_._v(" "),t("ul",[t("li",[_._v("三者都是用来定义上下文的，也就是修改this的指向")]),_._v(" "),t("li",[_._v("call 和 apply 会执行上下文并执行函数，而bind会执行上下文但不会执行函数，并返回新的函数")]),_._v(" "),t("li",[_._v("另外的区别是传参")]),_._v(" "),t("li",[_._v("call(name, 1,2,3)")]),_._v(" "),t("li",[_._v("apply(name, [1,2,3])")]),_._v(" "),t("li",[_._v("bind(name,1,2,3)()")])]),_._v(" "),t("h2",{attrs:{id:"_3、js的原型和原型链"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、js的原型和原型链"}},[_._v("#")]),_._v(" 3、js的原型和原型链")]),_._v(" "),t("blockquote",[t("p",[_._v("原型")])]),_._v(" "),t("ul",[t("li",[_._v("1、每个函数都有一个prototype属性，被称为显性原型")]),_._v(" "),t("li",[_._v("2、每个实例对象都有一个 "),t("code",[_._v("__proto__")]),_._v(" 属性，称为隐形原型")]),_._v(" "),t("li",[_._v("3、每个实例对象的隐形原型 "),t("code",[_._v("__proto__")]),_._v(" 属性指向自身构造函数的显性原型 prototype")]),_._v(" "),t("li",[_._v("4、每个prototype原型都有一个constructor属性，指向它关联的构造函数")])]),_._v(" "),t("blockquote",[t("p",[_._v("原型链"),t("br"),_._v("\n获取对象属性时，如果对象自身没有这个属性，那就会去他的原型 "),t("code",[_._v("__proto__")]),_._v("去找，如果找不到，就会找原型的原型，直到最顶层 "),t("code",[_._v("object.prototype")]),_._v("为止，形成的链式关系就叫原型链， Object.prototype对象也有 "),t("code",[_._v("__proto__")]),_._v(" 属性值为Null,")])]),_._v(" "),t("h2",{attrs:{id:"_4、js的数据类型有哪些-以及检测数据类型的方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、js的数据类型有哪些-以及检测数据类型的方法"}},[_._v("#")]),_._v(" 4、js的数据类型有哪些，以及检测数据类型的方法")]),_._v(" "),t("ul",[t("li",[_._v("数据类型有： 基础类型string,number,undefined,null,boolean 和 引用类型 object,array,function,date")]),_._v(" "),t("li",[_._v("检测数据类型方法有:\n"),t("ul",[t("li",[_._v("typeof： 区分基础类型，但不能识别null(会返回object，与二进制转换有关)，可以识别function，但其他引用类型都是object")]),_._v(" "),t("li",[_._v("instanceof: 判断两个对象之间是否属于实例关系")]),_._v(" "),t("li",[_._v("Object.prototype.toString.call 可以检测所有类型")])])])]),_._v(" "),t("h2",{attrs:{id:"_5、display有哪些属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5、display有哪些属性"}},[_._v("#")]),_._v(" 5、display有哪些属性")]),_._v(" "),t("ul",[t("li",[_._v("block: 块状元素")]),_._v(" "),t("li",[_._v("inline: 内联元素")]),_._v(" "),t("li",[_._v("inline-block: 行内块元素")]),_._v(" "),t("li",[_._v("none")]),_._v(" "),t("li",[_._v("flex: 弹性布局")]),_._v(" "),t("li",[_._v("inline-table: 内联表格")]),_._v(" "),t("li",[_._v("table: 块级表格")]),_._v(" "),t("li",[_._v("grid: 网格布局")]),_._v(" "),t("li",[_._v("inherit: 继承父元素的属性值")])]),_._v(" "),t("h2",{attrs:{id:"_6、csrf和xss是什么-如何避免"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6、csrf和xss是什么-如何避免"}},[_._v("#")]),_._v(" 6、csrf和xss是什么，如何避免")]),_._v(" "),t("blockquote",[t("p",[_._v("xss：跨站脚本攻击， 是一个代码注入攻击，避免方式有")])]),_._v(" "),t("ul",[t("li",[_._v("url参数使用encodeURLComponent方法转义")]),_._v(" "),t("li",[_._v("后端做过滤检查")]),_._v(" "),t("li",[_._v("对用户输入内容做标签转换")])]),_._v(" "),t("blockquote",[t("p",[_._v("csrf：跨站请求伪造，避免方式有")])]),_._v(" "),t("ul",[t("li",[_._v("添加验证码")]),_._v(" "),t("li",[_._v("使用token")])]),_._v(" "),t("h2",{attrs:{id:"_7、let-const-var区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7、let-const-var区别"}},[_._v("#")]),_._v(" 7、let/const/var区别")]),_._v(" "),t("ul",[t("li",[_._v("var是es5提出的，let/const是es6提出的")]),_._v(" "),t("li",[_._v("const声明是常量，必须赋值，声明后不可修改，let和var是变量，可修改可不赋值")]),_._v(" "),t("li",[_._v("var可以重复声明变量，覆盖前面一个，let和const在同一作用域内不允许重复声明")]),_._v(" "),t("li",[_._v("var存在变量提升，const和let不存在变量提升")]),_._v(" "),t("li",[_._v("var 不存在块级作用域，是函数作用域，let和const存在块级作用域")])]),_._v(" "),t("h2",{attrs:{id:"_8、什么是虚拟dom"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8、什么是虚拟dom"}},[_._v("#")]),_._v(" 8、什么是虚拟DOM")]),_._v(" "),t("p",[_._v("虚拟DOM是对真实DOM的映射，本质上是一个普通的js对象")]),_._v(" "),t("h2",{attrs:{id:"_9、vue组件的传值方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9、vue组件的传值方式"}},[_._v("#")]),_._v(" 9、vue组件的传值方式")]),_._v(" "),t("ul",[t("li",[_._v("父传子： props")]),_._v(" "),t("li",[_._v("子传父： $emit")]),_._v(" "),t("li",[_._v("provide 和 inject")]),_._v(" "),t("li",[_._v("parent 和 children")]),_._v(" "),t("li",[_._v("ref")]),_._v(" "),t("li",[_._v("$attrs 和 $ listeners")]),_._v(" "),t("li",[_._v("跨组件： event-bus，定义全局事件总线 vue.prototype.$bus = some")])]),_._v(" "),t("h2",{attrs:{id:"_10、ajax-和-axios"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10、ajax-和-axios"}},[_._v("#")]),_._v(" 10、ajax 和 axios")]),_._v(" "),t("ul",[t("li",[_._v("ajax: 是一种技术方案,依赖浏览器提供的 XMLHttpRequest 对象发出 HTTP 请求和接收 HTTP 响应, 实现与服务器的数据交互")]),_._v(" "),t("li",[_._v("axios: 是一个基于promise的网络请求库，也是使用XMLHttpRequest进行请求和接受")])]),_._v(" "),t("h2",{attrs:{id:"_11、跨域的处理方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11、跨域的处理方式"}},[_._v("#")]),_._v(" 11、跨域的处理方式")]),_._v(" "),t("ul",[t("li",[_._v("利用script标签请求")]),_._v(" "),t("li",[_._v("window.postMessage")]),_._v(" "),t("li",[_._v("jsonp")]),_._v(" "),t("li",[_._v("cors")]),_._v(" "),t("li",[_._v("webpack本地代理")]),_._v(" "),t("li",[_._v("websocke")]),_._v(" "),t("li",[_._v("nginx反向代理")])]),_._v(" "),t("h2",{attrs:{id:"_12、localstorage-sessionstorage-cookie-session区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_12、localstorage-sessionstorage-cookie-session区别"}},[_._v("#")]),_._v(" 12、localStorage，sessionStorage,cookie,session区别")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("cookie数据始终在同源的http请求中携带，会在浏览器和服务器直接来回传递，而localStorage只存本地")])]),_._v(" "),t("li",[t("p",[_._v("存储大小限制不同，cookie不能超过4k左右，而localStorage和sessionStorage可以到5M")])]),_._v(" "),t("li",[t("p",[_._v("数据有效期不同，sessionStorage仅在的当前窗口关闭前有效，localStorage始终有效，cookie也是所有同源窗口共享的")])]),_._v(" "),t("li",[t("p",[_._v("cookie数据存放在客户的浏览器上，session存储在服务器")])])]),_._v(" "),t("h2",{attrs:{id:"_13、http-状态码都有哪些"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13、http-状态码都有哪些"}},[_._v("#")]),_._v(" 13、http 状态码都有哪些")]),_._v(" "),t("ul",[t("li",[_._v("200： 客户端请求成功")]),_._v(" "),t("li",[_._v("204: 无返回内容")]),_._v(" "),t("li",[_._v("400：客户端请求语法错误，服务器无法理解")]),_._v(" "),t("li",[_._v("401： 未授权")]),_._v(" "),t("li",[_._v("403： 服务器拒绝提供服务")]),_._v(" "),t("li",[_._v("404：资源不存在")]),_._v(" "),t("li",[_._v("500： 服务器发生不可预期错误")]),_._v(" "),t("li",[_._v("503：服务器当前不能处理客户端请求")])]),_._v(" "),t("h2",{attrs:{id:"_14、es6有哪些新特性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_14、es6有哪些新特性"}},[_._v("#")]),_._v(" 14、es6有哪些新特性")]),_._v(" "),t("p",[_._v("let,const,模板字符串，展开运算符，箭头函数，函数参数默认值，解构赋值")]),_._v(" "),t("h2",{attrs:{id:"_15、promise有哪些方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_15、promise有哪些方法"}},[_._v("#")]),_._v(" 15、promise有哪些方法")]),_._v(" "),t("p",[_._v("all(全部成功),race(执行最快的),resolve,finally,catch,then")]),_._v(" "),t("h2",{attrs:{id:"_16、vue-watch-和-computed-区别和使用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_16、vue-watch-和-computed-区别和使用场景"}},[_._v("#")]),_._v(" 16、Vue watch 和 computed 区别和使用场景")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("watch 是监听一个值的变化，然后执行对应的回调")])]),_._v(" "),t("li",[t("p",[_._v("watch中的函数不需要调用")])]),_._v(" "),t("li",[t("p",[_._v("watch不支持缓存")])]),_._v(" "),t("li",[t("p",[_._v("watch有两个参数 immediate: 组件加载立即触发，deep: 深度监听")])]),_._v(" "),t("li",[t("p",[_._v("computed 中的函数直接调用")])]),_._v(" "),t("li",[t("p",[_._v("computed中的函数必须return返回")])]),_._v(" "),t("li",[t("p",[_._v("computed 依赖data中的属性，data属性值发生改变的时候，当前函数才会执行")])]),_._v(" "),t("li",[t("p",[_._v("computed中不能对data中的属性进行赋值")])]),_._v(" "),t("li",[t("p",[_._v("computed属性的结果会被缓存，除非依赖的属性发生变化才会重新计算")])])]),_._v(" "),t("blockquote",[t("p",[_._v("使用场景")])]),_._v(" "),t("ul",[t("li",[_._v("watch：适合一个数据影响多个数据，例如购物车商品结算")]),_._v(" "),t("li",[_._v("computed： 一个数据受多个数据影响，如搜索数据")])]),_._v(" "),t("h2",{attrs:{id:"_17、vue3-和-vue2-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_17、vue3-和-vue2-的区别"}},[_._v("#")]),_._v(" 17、vue3 和 vue2 的区别")]),_._v(" "),t("ul",[t("li",[_._v("1、vue2是使用object.defineProperty对数据进行劫持，结合发布订阅者模式的方式实现的，vue3使用proxy进行代理，可以直接监听对象和数据的变化，不需要遍历每个属性")]),_._v(" "),t("li",[_._v("2、根节点不同，vue3组件中支持多个根节点，可以写多个div根标签")]),_._v(" "),t("li",[_._v("3、Composition API（组合API）")]),_._v(" "),t("li",[_._v("4、 生命周期的变化，vue3没有beforCreate和create，用setup()代替，其他生命周期也换了名字")]),_._v(" "),t("li",[_._v("5、diff算法")]),_._v(" "),t("li",[_._v("vue2的diff算法是进行虚拟节点对比，并返回一个patch对象，用来存储两个节点不同的地方，最后根据patch记录去局部更新DOM，会比较每一个Vnode,对于一些不参与更新的元素，进行比较是有点消耗性能的")]),_._v(" "),t("li",[_._v("vue3的diff算法在初始化的时候会给每个虚拟节点添加一个patchFlags，patchFlags就是优化的标识，只会比较patchFlags发送变化的Vnode进行更新视图，没有变化的元素在渲染时直接复用")]),_._v(" "),t("li",[_._v("6、v-if v-for的优先级")]),_._v(" "),t("li",[_._v("vue2的v-for优先级大于v-if")]),_._v(" "),t("li",[_._v("vue3的v-if优先级大于v-for")])]),_._v(" "),t("h2",{attrs:{id:"_18、虚拟-dom-和真实-dom-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_18、虚拟-dom-和真实-dom-的区别"}},[_._v("#")]),_._v(" 18、虚拟 dom 和真实 dom 的区别")]),_._v(" "),t("ul",[t("li",[_._v("真实DOM是文档对象模型，是一个结构化文本的抽象")]),_._v(" "),t("li",[_._v("虚拟DOM是以javascript对象形式存在的对真实DOM的描述")])]),_._v(" "),t("blockquote",[t("p",[_._v("区别")])]),_._v(" "),t("ul",[t("li",[_._v("虚拟DOM不会进行排版与重绘操作，真实DOM会频繁重排和重绘")]),_._v(" "),t("li",[_._v("虚拟DOM的总损耗是 “虚拟DOM的增删改+真实DOM的差异增删改+排版和重绘”，真实DOM的总损耗是“真实DOM的完全增删改+排版和重绘”")])]),_._v(" "),t("h2",{attrs:{id:"_19、http和https区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_19、http和https区别"}},[_._v("#")]),_._v(" 19、http和https区别")]),_._v(" "),t("ul",[t("li",[_._v("http: 超文本传输协议，运行在TCP之上，指定了客户端可能发送给服务端什么样的消息以及得到什么样的响应")]),_._v(" "),t("li",[_._v("https: 是在http的基础上通过传出加密和身份认证保证了传输过程的安全性，在http基础上加入SSL协议")]),_._v(" "),t("li",[_._v("SSL：是一个为网络通信提供安全以及数据完整性的一种安全协议，TLS与SSL在传输层与应用层之间对网络连接进行加密")])]),_._v(" "),t("blockquote",[t("p",[_._v("区别")])]),_._v(" "),t("ul",[t("li",[_._v("传输信息安全性不同，http是明文传输，攻击者截取了传输报文就可直接看到信息，https是通过SSL进行了传输加密")]),_._v(" "),t("li",[_._v("连接方式不同：http是无状态的，而https是有SSL+http协议构建的可进行加密传输、身份认证的网络协议")]),_._v(" "),t("li",[_._v("端口不同：http协议端口是80，https是443")]),_._v(" "),t("li",[_._v("证书申请方式不同：http协议免费申请，https需要ca申请证书，一般需要缴费")])]),_._v(" "),t("h2",{attrs:{id:"_20、post和get"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_20、post和get"}},[_._v("#")]),_._v(" 20、post和get")]),_._v(" "),t("ul",[t("li",[_._v("get参数通过URL传递，post放在body")]),_._v(" "),t("li",[_._v("get在URL传递的参数有长度限制，post没有")]),_._v(" "),t("li",[_._v("get在浏览器回退是无害的，post会再次提交请求")]),_._v(" "),t("li",[_._v("get请求会被浏览器主动cache，post不会")]),_._v(" "),t("li",[_._v("get会直接暴露在URL，相对不安全")]),_._v(" "),t("li",[_._v("get只接受ASCll字符，post没有限制")]),_._v(" "),t("li",[_._v("get产生一个TCP数据包，POST产生两个TCP数据包（先发送header后发送data）")])]),_._v(" "),t("h2",{attrs:{id:"_21、闭包"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_21、闭包"}},[_._v("#")]),_._v(" 21、闭包")]),_._v(" "),t("p",[_._v("闭包是值有权访问另一个函数作用域中变量的函数")]),_._v(" "),t("blockquote",[t("p",[_._v("特性")])]),_._v(" "),t("ul",[t("li",[_._v("函数内嵌套函数")]),_._v(" "),t("li",[_._v("内部函数可以引用外层的参数和变量")]),_._v(" "),t("li",[_._v("参数和变量不会被垃圾回收机制回收")])]),_._v(" "),t("h2",{attrs:{id:"_22、this指向"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_22、this指向"}},[_._v("#")]),_._v(" 22、this指向")]),_._v(" "),t("ul",[t("li",[_._v("this默认指向函数的直接调用者")]),_._v(" "),t("li",[_._v("如果有new关键字，this指向new出来的那个对象")]),_._v(" "),t("li",[_._v("在事件中，this指向触发这个事件的对象")]),_._v(" "),t("li",[_._v("箭头函数指向所在作用域的那个对象")])]),_._v(" "),t("h2",{attrs:{id:"_23、事件循环机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_23、事件循环机制"}},[_._v("#")]),_._v(" 23、事件循环机制")]),_._v(" "),t("ul",[t("li",[_._v("javascript是单线程执行模式，执行的时候会区分为主线程和任务队列，主线程执行完毕，会从任务队列中读取新的任务放入主线程执行，这个读取过程是循环读取，所以叫事件循环")]),_._v(" "),t("li",[_._v("任务队列分为宏任务和微任务，同层次，会先执行微任务，再执行宏任务")]),_._v(" "),t("li",[_._v("微任务： promise.then()，process.nextTick()")]),_._v(" "),t("li",[_._v("宏任务： setTimeOut(), setInterval()")])]),_._v(" "),t("h2",{attrs:{id:"_24、重绘与回流"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_24、重绘与回流"}},[_._v("#")]),_._v(" 24、重绘与回流")]),_._v(" "),t("blockquote",[t("p",[_._v("重绘：当页面中元素的样式发生改变时，并且元素的样式改变不会改变元素在文档中的位置，那么浏览器会将新样式赋予给元素，这个过程叫重绘")])]),_._v(" "),t("ul",[t("li",[_._v("会导致重绘的有：background,visibility,绝对定位位置修改")])]),_._v(" "),t("blockquote",[t("p",[_._v("回流：当渲染树中的一些元素的结构或者尺寸发送改变，浏览器会重新渲染部分或者全部文档的过程，叫回流")])]),_._v(" "),t("ul",[t("li",[_._v("会导致回流的有：页面初次渲染，窗口大小改变，content文本内容变换，新增删除节点，激活css伪类")])]),_._v(" "),t("blockquote",[t("p",[_._v("回流的性能消耗比重绘大，回流必定导致重绘，重绘不一定会回流")])]),_._v(" "),t("h2",{attrs:{id:"_25、输入url发生了什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_25、输入url发生了什么"}},[_._v("#")]),_._v(" 25、输入URL发生了什么")]),_._v(" "),t("ul",[t("li",[_._v("1、DNS域名解析： 域名解析成IP地址")]),_._v(" "),t("li",[_._v("2、浏览器与目标服务器建立一个TCP链接")]),_._v(" "),t("li",[_._v("3、浏览器向服务器发送请求报文")]),_._v(" "),t("li",[_._v("4、服务器向浏览器发送响应报文")]),_._v(" "),t("li",[_._v("5、浏览器进行渲染")]),_._v(" "),t("li",[_._v("6、关闭TCP链接")])]),_._v(" "),t("h2",{attrs:{id:"_26、浏览器渲染的步骤"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_26、浏览器渲染的步骤"}},[_._v("#")]),_._v(" 26、浏览器渲染的步骤")]),_._v(" "),t("ul",[t("li",[_._v("第一步，HTML转换成DOM")]),_._v(" "),t("li",[_._v("第二步，CSS转换成浏览器可理解的styleSheets，然后计算DOM节点的样式")]),_._v(" "),t("li",[_._v("第三步，创建布居树，计算元素的布局信息")]),_._v(" "),t("li",[_._v("第四步，对布居树进行分层，构建分层树")]),_._v(" "),t("li",[_._v("第五步，为每个图层生产绘制列表，并将其提交到合成线程")]),_._v(" "),t("li",[_._v("第六步，合成线程将图层转化为图块，进而将图块转化成位图")]),_._v(" "),t("li",[_._v("第七步，合成线程发送绘制命令给浏览器")]),_._v(" "),t("li",[_._v("第八步，浏览器根据绘制命令生成页面，并显示到显示器上。")])]),_._v(" "),t("h2",{attrs:{id:"_27、vue-router的几种模式和守卫"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_27、vue-router的几种模式和守卫"}},[_._v("#")]),_._v(" 27、Vue-router的几种模式和守卫")]),_._v(" "),t("blockquote",[t("p",[_._v("模式有hash何history\n守卫有")])]),_._v(" "),t("ul",[t("li",[_._v("全局守卫： beforEach路由进入之前，afterEach路由进入之后")]),_._v(" "),t("li",[_._v("组件内守卫：beforRouterEnter路由进入之前，beforRouterUpdate路由更新之前，beforRouterLeave路由离开之前")]),_._v(" "),t("li",[_._v("路由独享守卫： beforEnter路由进入之前")])]),_._v(" "),t("h2",{attrs:{id:"_28、bfc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_28、bfc"}},[_._v("#")]),_._v(" 28、BFC")]),_._v(" "),t("ul",[t("li",[_._v("BFC：块级格式化上下文，属于流动模型布局，具有BFC特性的元素可以看作是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素")])]),_._v(" "),t("blockquote",[t("p",[_._v("行成BFC的条件")])]),_._v(" "),t("ul",[t("li",[_._v("body根元素")]),_._v(" "),t("li",[_._v("浮动元素,float除了none以外的值")]),_._v(" "),t("li",[_._v("绝对定位元素： position(absolute,fixed)")]),_._v(" "),t("li",[_._v("display的inline-block,table-cells,flex")]),_._v(" "),t("li",[_._v("overflow除了visible以外的值(hidden,auto,scroll)")])]),_._v(" "),t("blockquote",[t("p",[_._v("BFC常见作用")])]),_._v(" "),t("ul",[t("li",[_._v("阻止外边距折叠：如标准文档流里，块级标签之间竖直方向的margin会以大的为准，可以用overflow:hidden产生BFC来解决")]),_._v(" "),t("li",[_._v("包含浮动元素")]),_._v(" "),t("li",[_._v("阻止元素被浮动元素覆盖")])]),_._v(" "),t("h2",{attrs:{id:"_29、响应式布局的方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_29、响应式布局的方式"}},[_._v("#")]),_._v(" 29、响应式布局的方式")]),_._v(" "),t("ul",[t("li",[_._v("媒体查询")]),_._v(" "),t("li",[_._v("百分比布局")]),_._v(" "),t("li",[_._v("rem布局")]),_._v(" "),t("li",[_._v("vh/vw单位")])]),_._v(" "),t("h2",{attrs:{id:"_30、垂直居中的方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_30、垂直居中的方法"}},[_._v("#")]),_._v(" 30、垂直居中的方法")]),_._v(" "),t("ul",[t("li",[_._v("使用绝对定位和负外边距")]),_._v(" "),t("li",[_._v("使用绝对定位和transform： transform: translate(0, -50%);")]),_._v(" "),t("li",[_._v("绝对定位结合 margin: auto")]),_._v(" "),t("li",[_._v("使用padding")]),_._v(" "),t("li",[_._v("flex布局： aligin-items: center（横向居中是justify-content: center）")]),_._v(" "),t("li",[_._v("line-height对单行文本进行垂直居中")])]),_._v(" "),t("h2",{attrs:{id:"_31、webpack-五个核心概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_31、webpack-五个核心概念"}},[_._v("#")]),_._v(" 31、webpack 五个核心概念")]),_._v(" "),t("ul",[t("li",[_._v("Entry 入口(Entry) 指示 webpack 以哪个文件为入口起点开始打包，分析构建内部依赖图。")]),_._v(" "),t("li",[_._v("Output 输出(Output) 指示 webpack 打包后的资源 bundles 输出到哪里去，以及如何命名。")]),_._v(" "),t("li",[_._v("Loader Loader 让 webpack 能 够 去 处 理 那 些 非 JavaScript 文 件 (webpack 自 身 只 理 解 JavaScript)")]),_._v(" "),t("li",[_._v("Plugins 插件(Plugins)可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩， 一直到重新定义环境中的变量等")]),_._v(" "),t("li",[_._v("Mode 模式(Mode)指示 webpack 使用相应模式的配置")])]),_._v(" "),t("h2",{attrs:{id:"_32、webpack的loader和plugin的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_32、webpack的loader和plugin的区别"}},[_._v("#")]),_._v(" 32、webpack的loader和plugin的区别")]),_._v(" "),t("ul",[t("li",[_._v("loader 用于加载某些资源文件。")])]),_._v(" "),t("p",[_._v("因为 webpack 只能理解 JavaScript 和 JSON 文件，对于其他资源例如 css，图片，或者其他的语法集，比如 jsx， coffee，是没有办法加载的。 这就需要对应的loader将资源转化，加载进来。从字面意思也能看出，loader是用于加载的，它作用于一个个文件上。")]),_._v(" "),t("ul",[t("li",[_._v("plugin 用于扩展webpack的功能。")])]),_._v(" "),t("p",[_._v("目的在于解决loader无法实现的其他事,它直接作用于 webpack，扩展了它的功能。当然loader也是变相的扩展了 webpack ，但是它只专注于转化文件（transform）这一个领域。而plugin的功能更加的丰富，而不仅局限于资源的加载")]),_._v(" "),t("h2",{attrs:{id:"_33、tcp三次握手-建立连接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_33、tcp三次握手-建立连接"}},[_._v("#")]),_._v(" 33、TCP三次握手 建立连接")]),_._v(" "),t("ul",[t("li",[_._v("第一次握手：客户端发送syn包(seq=x)到服务器，并进入SYN_SENT状态，等待服务器确认；")]),_._v(" "),t("li",[_._v("第二次握手：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己也发送一个SYN包（seq=y），即SYN+ACK包，此时服务器进入SYN_RECV状态；")]),_._v(" "),t("li",[_._v("第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=y+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。")])]),_._v(" "),t("h2",{attrs:{id:"_34、tcp四次挥手-断开连接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_34、tcp四次挥手-断开连接"}},[_._v("#")]),_._v(" 34、TCP四次挥手 断开连接")]),_._v(" "),t("ul",[t("li",[_._v("第一次挥手：主动关闭方发送一个FIN，用来关闭主动方到被动关闭方的数据传送，也就是主动关闭方告诉被动关闭方：我已经不 会再给你发数据了(当然，在fin包之前发送出去的数据，如果没有收到对应的ack确认报文，主动关闭方依然会重发这些数据)，但是，此时主动关闭方还可 以接受数据。")]),_._v(" "),t("li",[_._v("第二次挥手：被动关闭方收到FIN包后，发送一个ACK给对方，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号）。")]),_._v(" "),t("li",[_._v("第三次挥手：被动关闭方发送一个FIN，用来关闭被动关闭方到主动关闭方的数据传送，也就是告诉主动关闭方，我的数据也发送完了，不会再给你发数据了。")]),_._v(" "),t("li",[_._v("第四次挥手：主动关闭方收到FIN后，发送一个ACK给被动关闭方，确认序号为收到序号+1，至此，完成四次挥手")])]),_._v(" "),t("h2",{attrs:{id:"_35、script标签为什么要放在底部"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_35、script标签为什么要放在底部"}},[_._v("#")]),_._v(" 35、script标签为什么要放在底部")]),_._v(" "),t("p",[_._v("因为浏览器在渲染HTML的时候是从上到下依次执行，")]),_._v(" "),t("p",[_._v("遇到script标签则会停止DOM树的渲染，优先下载js文件，")]),_._v(" "),t("p",[_._v("如果文件很大，则导致页面加载时间过长，影响用户体验")]),_._v(" "),t("h2",{attrs:{id:"_36、介绍一下http缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_36、介绍一下http缓存"}},[_._v("#")]),_._v(" 36、介绍一下http缓存")]),_._v(" "),t("blockquote",[t("p",[_._v("缓存是一种保存资源副本并在下次请求时直接使用该副本的技术，使用缓存的优点：")])]),_._v(" "),t("ul",[t("li",[_._v("减少冗余的数据传输")]),_._v(" "),t("li",[_._v("减少服务器负担")]),_._v(" "),t("li",[_._v("加快客户端加载网页的速度"),t("br"),_._v("\n根据是否需要向服务器重新发起 HTTP 请求将缓存过程分为两个部分，分别是 强缓存 和 协商缓存(弱缓存、对比缓存) 。")])]),_._v(" "),t("blockquote",[t("p",[_._v("强缓存\n强缓存是利用 http 的返回头中的 Expires 或者 Cache-Control 字段来控制的，用来表示资源在客户端缓存的有效期，Cache-Control 的优先级更高\n协商缓存")])]),_._v(" "),t("p",[_._v("协商缓存就是强缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程。如果协商缓存命中，则返回 304 状态码并且会显示一个 Not Modified 的字符串，如果未命中，则会返回 200 状态码及最新的资源和缓存标识。")]),_._v(" "),t("h2",{attrs:{id:"_37、spa单页面应用和多页面应用有什么区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_37、spa单页面应用和多页面应用有什么区别"}},[_._v("#")]),_._v(" 37、SPA单页面应用和多页面应用有什么区别")]),_._v(" "),t("blockquote",[t("p",[_._v("单页面优点：")])]),_._v(" "),t("ul",[t("li",[t("p",[_._v("减小服务器压力：如果不用单页面（spa），如果每次切换页面的时候，都向服务器发送一个请求，服务器返回一个html文件；但是如果使用了单页面，在切换时，不需要请求服务器，只要通过本地的js来切换即可。")])]),_._v(" "),t("li",[t("p",[_._v("服务器端就不需要配置路由，完全做到了前后端分离 -增强用户体验，增加app的使用流畅性。 使用spa之后，页面在切换的时候非常流畅，完全没有那种不断刷新的感觉，而是非常快的就有了响应，因为js运行速度很快，所以js在做本地路由的时候，就会非常快。")])])]),_._v(" "),t("blockquote",[t("p",[_._v("单页面缺点")])]),_._v(" "),t("ul",[t("li",[_._v("首屏时间慢：单页应用的首屏时间慢，首屏时需要请求一次html，同时还要发送一次js请求，两次请求回来了，首屏才会展示出来。相对于多页应用，首屏时间慢")]),_._v(" "),t("li",[_._v("SEO效果差，因为搜索引擎只认识html里的内容，不认识js的内容，而单页应用的内容都是靠js渲染生成出来的，搜索引擎不识别这部分内容，也就不会给一个好的排名，会导致单页应用做出来的网页在百度和谷歌上的排名差。")])])])}),[],!1,null,null,null);v.default=e.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{576:function(e,t,v){"use strict";v.r(t);var a=v(5),_=Object(a.a)({},(function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h2",{attrs:{id:"_1-1、vue生命周期"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-1、vue生命周期"}},[e._v("#")]),e._v(" 1.1、Vue生命周期")]),e._v(" "),v("p",[e._v("Vue的生命周期指的是Vue实例从创建到销毁的过程 -- "),v("code",[e._v("开始创建、初始化数据、编译模板、挂载DOM->渲染、更新->渲染、卸载")]),e._v("。\n而包含的生命钩子函数有：")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("beforCreate")]),e._v(": 实例创建前，未有data,event,watcher")]),e._v(" "),v("li",[v("code",[e._v("created")]),e._v(": 实例创建完成，已有data和方法的运算，watch/event的事件回调，未有$el")]),e._v(" "),v("li",[v("code",[e._v("beforMount")]),e._v(": 挂载开始前，相关render函数首次被调用")]),e._v(" "),v("li",[v("code",[e._v("mounted")]),e._v(": 挂载完成，此时有$el")]),e._v(" "),v("li",[v("code",[e._v("beforupdate")]),e._v(": 数据更新时调用，虚拟DOM打补丁之前")]),e._v(" "),v("li",[v("code",[e._v("updated")]),e._v(": 虚拟DOM重新渲染和打补丁后调用")]),e._v(" "),v("li",[v("code",[e._v("beforDestroy")]),e._v(": 实例销毁前")]),e._v(" "),v("li",[v("code",[e._v("destroy")]),e._v(": 实例销毁后")]),e._v(" "),v("li",[v("code",[e._v("activated")]),e._v(": keep-alive组件激活时")]),e._v(" "),v("li",[v("code",[e._v("deactivated")]),e._v(": keep-alive组件停用时")]),e._v(" "),v("li",[v("code",[e._v("errorCaptured")]),e._v(": 捕获一个来自子孙组件的错误时调用，此钩子有3个参数，错误对象、发送错误的组件实例、包含错误来源信息的字符串")])]),e._v(" "),v("h2",{attrs:{id:"_1-2、如何理解vue是一套渐进式的框架"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-2、如何理解vue是一套渐进式的框架"}},[e._v("#")]),e._v(" 1.2、如何理解Vue是一套渐进式的框架")]),e._v(" "),v("p",[e._v("渐进式代表的含义是： 没有多做职责以外的事，只提供了核心的 "),v("code",[e._v("组件系统")]),e._v(" 和 "),v("code",[e._v("双向数据绑定")])]),e._v(" "),v("h2",{attrs:{id:"_1-3、vue的两个核心"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-3、vue的两个核心"}},[e._v("#")]),e._v(" 1.3、Vue的两个核心")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("数据驱动")]),e._v(": 双向数据绑定，vue2利用的是es5的Object.definedProperty和存储器属性:getter和setter(所以只兼容ie9及以上)，其主要核心是VM，也就是viewModel,保证数据与视图的一致性")]),e._v(" "),v("li",[v("code",[e._v("组件系统")]),e._v(": 组件系统的核心选项\n"),v("ul",[v("li",[e._v("1、模板(template)： 模板声明了数据和最终展现给用户的DOM之间的映射关系")]),e._v(" "),v("li",[e._v("2、初始数据(data)：一个组件的初始数据状态，对于可复用的组件来说，这通常是私有的状态")]),e._v(" "),v("li",[e._v("3、接收的外部参数(props)： 组件之间通过参数来进行数据的传递和共享")]),e._v(" "),v("li",[e._v("4、方法(methods): 对数据的改动操作一般都在组件的方法内进行")]),e._v(" "),v("li",[e._v("5、生命周期钩子函数：一个组件会触发多个生命钩子函数")]),e._v(" "),v("li",[e._v("6、私有资源(assets)：Vue当中将用户自定义的指令、过滤器、组件等统称为资源，一个组件可以声明自己的私有资源，使其只允许该组件和他的子组件可以调用")])])])]),e._v(" "),v("h2",{attrs:{id:"_1-4、vue常用指令"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-4、vue常用指令"}},[e._v("#")]),e._v(" 1.4、Vue常用指令")]),e._v(" "),v("p",[v("code",[e._v("v-if")]),e._v("、 "),v("code",[e._v("v-show")]),e._v("、 "),v("code",[e._v("v-for")]),e._v("、 "),v("code",[e._v("v-bind")]),e._v("、 "),v("code",[e._v("v-on")]),e._v("、 "),v("code",[e._v("v-model")]),e._v("、 "),v("code",[e._v("v-html")]),e._v("、 "),v("code",[e._v("v-text")]),e._v("、 "),v("code",[e._v("v-once")]),e._v("、 "),v("code",[e._v("v-pre：跳过这个元素和它的子元素的编译过程，一些静态内容不需要编辑加这个指令可以加快编译")])]),e._v(" "),v("h2",{attrs:{id:"_1-5、v-if-和-v-show"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-5、v-if-和-v-show"}},[e._v("#")]),e._v(" 1.5、v-if 和 v-show")]),e._v(" "),v("ul",[v("li",[e._v("相同点：都可以动态显示DOM元素")]),e._v(" "),v("li",[e._v("不同点：\n"),v("ul",[v("li",[e._v("1、v-if是真正的条件渲染，会将元素摧毁和重建，而v-show只是简单的切换css的display属性")]),e._v(" "),v("li",[e._v("2、v-if是惰性的，如果在初始渲染条件时为假，则不处理，直到条件第一次为真时，才会开始渲染模块，而v-show不管初始化条件是什么，元素都会渲染，然后根据条件设置不同的display属性")]),e._v(" "),v("li",[e._v("3、v-if有更高的切换消耗，而v-show有更高的初始化渲染消耗")]),e._v(" "),v("li",[e._v("4、v-if适合条件改变次数少的场景，v-show适合频繁切换条件的场景")])])])]),e._v(" "),v("h2",{attrs:{id:"_1-6、v-html-和-v-text"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-6、v-html-和-v-text"}},[e._v("#")]),e._v(" 1.6、v-html 和 v-text")]),e._v(" "),v("p",[e._v("v-html是更新元素的innerHTML,而v-text是更新元素的textContent")]),e._v(" "),v("h2",{attrs:{id:"_1-7、vue常用修饰符"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-7、vue常用修饰符"}},[e._v("#")]),e._v(" 1.7、Vue常用修饰符")]),e._v(" "),v("blockquote",[v("p",[e._v("v-on常用修饰符")])]),e._v(" "),v("ul",[v("li",[e._v(".stop: 调用event.stopPropagation()禁止事件冒泡")]),e._v(" "),v("li",[e._v(".once: 只触发一次回调")]),e._v(" "),v("li",[e._v(".left: 鼠标左键触发")]),e._v(" "),v("li",[e._v(".right: 鼠标右键触发")]),e._v(" "),v("li",[e._v(".middle: 鼠标中键触发")]),e._v(" "),v("li",[e._v(".native: 监听组件根元素的原生事件")]),e._v(" "),v("li",[e._v(".prevent: 调用event.preventDefault()阻止事件默认行为")])]),e._v(" "),v("blockquote",[v("p",[e._v("v-bind常用修饰符")])]),e._v(" "),v("ul",[v("li",[e._v(".prop: 被用于绑定DOM属性(property)")]),e._v(" "),v("li",[e._v(".camel: 将kebab-case特性名转为cameCase")]),e._v(" "),v("li",[e._v(".sync: 语法糖，会拓展成一个更新父组件绑定值的v-on侦听器")])]),e._v(" "),v("blockquote",[v("p",[e._v("v-model常用修饰符")])]),e._v(" "),v("ul",[v("li",[e._v(".lazy: 取代input监听change事件")]),e._v(" "),v("li",[e._v(".number: 输入的字符串转为数字")]),e._v(" "),v("li",[e._v(".trim: 输入首尾空格过滤")])]),e._v(" "),v("h2",{attrs:{id:"_1-8、vue中key的作用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-8、vue中key的作用"}},[e._v("#")]),e._v(" 1.8、Vue中key的作用")]),e._v(" "),v("p",[e._v("key的特殊属性主要作用在Vue的虚拟DOM的算法中，在新旧nodes对比时辨识VNodes。")]),e._v(" "),v("p",[e._v("如果不使用key，Vue会使用一种最大限度减少动态元素并且尽可能的尝试修复/再利用相同类型元素的算法")]),e._v(" "),v("p",[e._v("使用key,它会基于key的变化重新排列元素顺序，并且会移除key不存在的元素")]),e._v(" "),v("h2",{attrs:{id:"_1-9、vue事件中如何使用event对象"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-9、vue事件中如何使用event对象"}},[e._v("#")]),e._v(" 1.9、Vue事件中如何使用event对象")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v('<a href="javascript:;" data-id="1" @click="clickEvent($event)" ></a>\n\nclickEvent(event){ \n  // 获取data-id\n  console.log(event.target.dataset.id)\n  // 阻止事件冒泡\n  event.stopPropagation()\n}\n')])])]),v("h2",{attrs:{id:"_1-10、-nexttick的作用-和原理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-10、-nexttick的作用-和原理"}},[e._v("#")]),e._v(" 1.10、$nextTick的作用 和原理")]),e._v(" "),v("ul",[v("li",[e._v("作用：因为Vue的异步更新队列，$nextTick是用来知道什么时候DOM更新完成的")]),e._v(" "),v("li",[e._v("原理： 使用了宏任务和微任务，定义了一个异步方法，多次调用nexttick会将方法存入队列中，通过这个异步方法清空队列")])]),e._v(" "),v("h2",{attrs:{id:"_1-11、异步更新队列"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-11、异步更新队列"}},[e._v("#")]),e._v(" 1.11、异步更新队列")]),e._v(" "),v("p",[e._v("Vue在观察到数据变化时并不会直接更新DOM，而是开启一个队列，并缓存在同一事件循环中发生的所有数据变更。"),v("br"),e._v("\n所以在同一个watcher多次触发，只会添加到队列一次，因此可以去除重复数据可以避免不必要的计算的DOM操作。"),v("br"),e._v("\nVue在内部对异步队列尝试使用原生的 "),v("code",[e._v("Promise.then")]),e._v("、"),v("code",[e._v("MatationBoserve")]),e._v("和 "),v("code",[e._v("setImmediate")]),e._v("，如都不支持，则采用 "),v("code",[e._v("setTimeout")])]),e._v(" "),v("h2",{attrs:{id:"_1-12、data为什么是个函数"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-12、data为什么是个函数"}},[e._v("#")]),e._v(" 1.12、data为什么是个函数")]),e._v(" "),v("p",[e._v("因为一个组件可以是共享的，但他们的data应该是私有的，所以每个组件都要return一个新的data对象，返回一个唯一对象，不和其他组件共用。"),v("br"),e._v("\n这个是因为js自身的特性(原型链)带来的，与vue自身设计无关")]),e._v(" "),v("h2",{attrs:{id:"_1-13、v-if和v-for的优先级"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-13、v-if和v-for的优先级"}},[e._v("#")]),e._v(" 1.13、v-if和v-for的优先级")]),e._v(" "),v("ul",[v("li",[e._v("vue2.x上，v-for优先级比v-if高，vue3.x上，v-if优先级比v-for高")]),e._v(" "),v("li",[e._v("所以在vue2.x同一节点上使用v-if和v-for，会每个循环都执行if，所以写法上用if包裹for")])]),e._v(" "),v("h2",{attrs:{id:"_1-14、vue组件的通信方式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-14、vue组件的通信方式"}},[e._v("#")]),e._v(" 1.14、Vue组件的通信方式")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("props和$emit")]),e._v(": 父子组件通信")]),e._v(" "),v("li",[v("code",[e._v("$parent和$children")]),e._v(": 通过获取父子组件的实例来实现通信")]),e._v(" "),v("li",[v("code",[e._v("$attrs和$listeners")]),e._v(": 适用于嵌套深的组件通信，"),v("br"),e._v('\n$attrs会包含父组件中没有被props接收的所有属性(不包括class和style)，可以通过v-bind="$attrs"直接将这些属性传入内部组件。'),v("br"),e._v('\n$listeners会包含父组件中所有的v-on事件监听器(不包括.native修饰器的)，可以通过v-on="$listeners"传入内部组件'),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v('// 父组件\n<template>  <Child :name="name" @setName="setName" />  </template>\n// 子组件 child\n<Child2 v-bind="$attrs" v-on="$listenters" />\n// 孙组件 child2\n<template><div>{{name}}</div></template>\nexport default{\n  created(){\n    this.$emit(\'setName\', \'test\')\n  }\n}\n')])])])]),e._v(" "),v("li",[v("code",[e._v("provide和inject")]),e._v(": provide 和 inject需要一起使用，可以使一个祖先组件向所有子孙组件注入一个依赖，可以指定想要提供给后代组件的数据和方法")])]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("// 祖先组件\nexport default {\n provide: { name: 'test' }\n}\n// 子孙组件\nexport default {\n inject: ['name'],\n created(){\n   console.log(this.name)\n }\n}\n")])])]),v("ul",[v("li",[v("code",[e._v("eventBus")]),e._v(": 在相互需要通信的两个组件中，引用同一个新的vue实例，然后在两个组件中通过分别调用这个实例的事件触发和监听来实现通信")]),e._v(" "),v("li",[v("code",[e._v("vuex和浏览器缓存等")])])]),e._v(" "),v("h2",{attrs:{id:"_1-15、keep-alive组件"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-15、keep-alive组件"}},[e._v("#")]),e._v(" 1.15、keep-alive组件")]),e._v(" "),v("ul",[v("li",[e._v("keep-alive主要作用于保留组件状态和避免重新渲染")]),e._v(" "),v("li",[e._v("keep-alive属性有 "),v("code",[e._v("include、exclude")]),e._v("（可使用自字符串和正则，exclude优先级大于includes），"),v("code",[e._v("max")]),e._v(": 可以存储多少个组件实例")]),e._v(" "),v("li",[e._v("生命周期包含 "),v("code",[e._v("activated")]),e._v(" - 组件激活时调用，和 "),v("code",[e._v("deactivated")]),e._v(" - 组件失活时调用，服务器端渲染期间不会被调用")])]),e._v(" "),v("h2",{attrs:{id:"_1-16、数组可以触发视图更新的方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-16、数组可以触发视图更新的方法"}},[e._v("#")]),e._v(" 1.16、数组可以触发视图更新的方法")]),e._v(" "),v("p",[v("code",[e._v("push")]),e._v(","),v("code",[e._v("pop")]),e._v(","),v("code",[e._v("shift")]),e._v(","),v("code",[e._v("unshift")]),e._v(","),v("code",[e._v("splice")]),e._v(","),v("code",[e._v("sort")]),e._v(","),v("code",[e._v("reverse")]),e._v(" ……")]),e._v(" "),v("h2",{attrs:{id:"_1-17、data变更但视图没有更新的原因"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-17、data变更但视图没有更新的原因"}},[e._v("#")]),e._v(" 1.17、data变更但视图没有更新的原因")]),e._v(" "),v("ul",[v("li",[e._v("Vue无法检测创建时不存在data中的属性")]),e._v(" "),v("li",[e._v("Vue无法检测对象属性的添加和删除")]),e._v(" "),v("li",[e._v("Vue不能检测数组的变化，也就是不能根据数组索引直接修改一个数组项")]),e._v(" "),v("li",[e._v("Vue不能检测直接修改数组长度的变化")])]),e._v(" "),v("h2",{attrs:{id:"_1-18、计算属性computed和方法methods调用有什么区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-18、计算属性computed和方法methods调用有什么区别"}},[e._v("#")]),e._v(" 1.18、计算属性computed和方法methods调用有什么区别")]),e._v(" "),v("ul",[v("li",[e._v("计算属性必须返回结果")]),e._v(" "),v("li",[e._v("计算属性是基于它的依赖缓存的，一个计算属性所依赖的数据发生变化时，它才会重新取值")]),e._v(" "),v("li",[e._v("使用计算属性还是方法methods，取决于是否需要缓存，当遍历大数据和做大量计算时，应当使用计算属性")]),e._v(" "),v("li",[e._v("计算属性是根据依赖自动执行的，methods需要事件调用")])]),e._v(" "),v("h2",{attrs:{id:"_1-19、自定义指令"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-19、自定义指令"}},[e._v("#")]),e._v(" 1.19、自定义指令")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v('Vue.directive("test",{\n  inserted: function(el){\n    \n  }\n})\n<input v-test />\n')])])]),v("h2",{attrs:{id:"_1-20、自定义指令的钩子函数"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-20、自定义指令的钩子函数"}},[e._v("#")]),e._v(" 1.20、自定义指令的钩子函数")]),e._v(" "),v("ul",[v("li",[e._v("bind - 只调用一次，指令第一次绑定到元素时调用")]),e._v(" "),v("li",[e._v("inserted - 被绑定元素插入父节点时调用")]),e._v(" "),v("li",[e._v("update - 所在组件的VNode更新时调用")]),e._v(" "),v("li",[e._v("componentUpdated - 指令所在组件的VNode及其子VNode全部更新后调用")]),e._v(" "),v("li",[e._v("unbind - 只调用一次，指令与元素解绑时调用")])]),e._v(" "),v("h2",{attrs:{id:"_1-21、computed和watch区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-21、computed和watch区别"}},[e._v("#")]),e._v(" 1.21、computed和watch区别")]),e._v(" "),v("blockquote",[v("p",[e._v("计算属性computed")])]),e._v(" "),v("ul",[v("li",[e._v("支持缓存，只有依赖数据发生变化，才会重新进行计算")]),e._v(" "),v("li",[e._v("不支持异步，当computed内有异步操作时无效，无法监听数据变化")]),e._v(" "),v("li",[e._v("computed属性值默认走缓存，基于data中声明过或者父组件传递的props中数据通过计算得到的值")]),e._v(" "),v("li",[e._v("可以监听多个依赖数据变化")])]),e._v(" "),v("blockquote",[v("p",[e._v("侦听属性watch")])]),e._v(" "),v("ul",[v("li",[e._v("不支持缓存，数据改变则直接会触发操作")]),e._v(" "),v("li",[e._v("watch支持异步")]),e._v(" "),v("li",[e._v("监听的函数接受两个参数，newValue,oldValue")]),e._v(" "),v("li",[e._v("只能监听一个数据")]),e._v(" "),v("li",[e._v("watch拓展参数"),v("br"),e._v(" "),v("code",[e._v("hander")]),e._v(": 回调函数"),v("br"),e._v(" "),v("code",[e._v("immediate")]),e._v(":组件初始化加载后立即触发"),v("br"),e._v(" "),v("code",[e._v("deep")]),e._v(":深度监听，发现对象内部值的变化")])]),e._v(" "),v("h2",{attrs:{id:"_1-22、object-defineproperty和proxy"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-22、object-defineproperty和proxy"}},[e._v("#")]),e._v(" 1.22、Object.defineProperty和proxy")]),e._v(" "),v("blockquote",[v("p",[e._v("区别")])]),e._v(" "),v("ul",[v("li",[e._v("Object.definedProperty只能劫持对象的属性，需要遍历对象的每个属性，如果属性值也是对象，则深度遍历，而proxy是直接代理对象，不需要遍历操作")]),e._v(" "),v("li",[e._v("Obejct.definedProperty对新增属性需要手动进行observe,因为劫持的是对象的属性，所以新增属性时需要重新遍历对象，再对新增的属性再使用definedProperty进行劫持，而proxy可以直接监听对象属性的添加")])]),e._v(" "),v("blockquote",[v("p",[e._v("definedProperty缺点")])]),e._v(" "),v("ul",[v("li",[e._v("不能监听数组变化")]),e._v(" "),v("li",[e._v("必须遍历对象的每个属性")]),e._v(" "),v("li",[e._v("必须深层遍历嵌套对象")])]),e._v(" "),v("blockquote",[v("p",[e._v("proxy对比definedProperty优点")])]),e._v(" "),v("ul",[v("li",[e._v("proxy可以监听整个对象而不是对象某个属性")]),e._v(" "),v("li",[e._v("可以监听数组的变化")]),e._v(" "),v("li",[e._v("proxy结果返回一个新的对象，可以直接操作新对象，而不是像definedProperty遍历属性进行修改")]),e._v(" "),v("li",[e._v("性能相对更好，但浏览器兼容性不够")])]),e._v(" "),v("h2",{attrs:{id:"_1-23、diff算法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-23、diff算法"}},[e._v("#")]),e._v(" 1.23、diff算法")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",[v("code",[e._v("在数据发生变化时，Vue是先根据真实DOM生成一个虚拟DOM树，当虚拟DOM某个节点的数据改变后会生成一个新的VNode,然后新的VNode会跟旧的VNode作比较，发现不一样的地方会直接修改在真实的DOM上，实现更新节点\n> 流程简述\n- 1、先同级比较，然后再比较子级节点\n- 2、先判断一方有子节点一方没有子节点的情况\n- 3、比较都有子节点的情况\n- 4、递归比较子节点\n")])])]),v("h2",{attrs:{id:"_1-24、slot插槽"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-24、slot插槽"}},[e._v("#")]),e._v(" 1.24、slot插槽")]),e._v(" "),v("blockquote",[v("p",[e._v("具名插槽\n有多个插槽时，需要指定名字去区分插槽，参数为name，不填默认default，没有被template包裹的都是默认插槽")])]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v('// base-layout组件\n<div>\n   <header>\n     <slot name="header"></slot>\n   </header>\n   <main>\n     <slot></slot>\n   </main>\n</div>\n// 父组件\n<base-layout>\n <template v-slot:header>我是header</template>\n <p>我是main1</p>\n <p>我是main2</p>\n</base-layout>\n')])])]),v("blockquote",[v("p",[e._v("作用域插槽\n可以访问组件内部数据的可复用插槽，也可以理解为带数据的插槽，在slot上绑定数据，传递给父组件")])]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v('// child组件\n<div>\n <slot v-bind:user="user"></slot>\n</div>\ndata(){\n return {\n   user: { name: \'test\' }\n }\n}\n// 父组件\n<child>\n <template v-slot:default="slotProps">{{slotProps.user.name}}</template>\n</child>\n')])])]),v("h2",{attrs:{id:"_1-25、mvvm和mvc"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-25、mvvm和mvc"}},[e._v("#")]),e._v(" 1.25、MVVM和MVC")]),e._v(" "),v("blockquote",[v("p",[e._v("MVC")])]),e._v(" "),v("ul",[v("li",[e._v("Model(模型) - 负责从数据库中获取数据")]),e._v(" "),v("li",[e._v("View(视图) - 负责展示数据的地方")]),e._v(" "),v("li",[e._v("Controller(控制器) - 用户交互的地方，例如点击事件\n思想： Controller将Model的数据展示在View上")])]),e._v(" "),v("blockquote",[v("p",[e._v("MVVM")])]),e._v(" "),v("ul",[v("li",[e._v("Model(模型) - 负责从数据库中获取数据")]),e._v(" "),v("li",[e._v("View(视图) - 负责展示数据的地方")]),e._v(" "),v("li",[e._v("VM - ViewModel,利用数据绑定和DOM事件监听实现数据的双向绑定\n思想：实现View和Model的自动同步，也就是Model的属性改变时，不需要手动操作显示DOM元素去改变view的显示")])]),e._v(" "),v("h2",{attrs:{id:"_1-26、ssr"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-26、ssr"}},[e._v("#")]),e._v(" 1.26、SSR")]),e._v(" "),v("ul",[v("li",[e._v("SSR是服务器渲染")]),e._v(" "),v("li",[e._v("基于node.js serve服务环境开发，所有html代码在服务器渲染")]),e._v(" "),v("li",[e._v("数据返回给前端，然后前端把返回的数据转为浏览器识别的html代码")]),e._v(" "),v("li",[e._v("SSR首次加载更快，有利于SEO优化")])]),e._v(" "),v("h2",{attrs:{id:"_1-27、props如何自定义验证"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-27、props如何自定义验证"}},[e._v("#")]),e._v(" 1.27、props如何自定义验证")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("  props: {\n    num: {\n      type: Number,\n      default: 1,\n      validator: ()=> value <= 2 // 返回false则验证不通过\n    }\n  }\n")])])]),v("h2",{attrs:{id:"_1-28、scoped"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-28、scoped"}},[e._v("#")]),e._v(" 1.28、scoped")]),e._v(" "),v("p",[e._v("给style标签添加scoped，可以给元素添加data-v-xxxx标记，确保各个文件的css互不影响")]),e._v(" "),v("h2",{attrs:{id:"_1-29、相同路由组件如何重新渲染"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-29、相同路由组件如何重新渲染"}},[e._v("#")]),e._v(" 1.29、相同路由组件如何重新渲染")]),e._v(" "),v("p",[e._v("Vue默认不会对相同的路由切换做重新渲染，可以添加key做处理")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("const router = [\n {\n   path: '/a',\n   component: MyComponent\n },\n {\n   path: '/b',\n   component: MyComponent\n }\n]\n<template><router-view :key=\"$route.path\"></router-view></template>\n")])])]),v("h2",{attrs:{id:"_2-1、-vue-router-有哪些导航钩子"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-1、-vue-router-有哪些导航钩子"}},[e._v("#")]),e._v(" 2.1、 Vue-Router 有哪些导航钩子")]),e._v(" "),v("ul",[v("li",[e._v("1、全局守卫       router.beforEach(to, from, next)")]),e._v(" "),v("li",[e._v("2、全局解析守卫    router.beforResolve(to, from, next)")]),e._v(" "),v("li",[e._v("3、全局后置守卫    router.afterEach(to, from)")]),e._v(" "),v("li",[e._v("4、路由独享守卫    beforEnter(to, from, next)")]),e._v(" "),v("li",[e._v("5、组件内守卫\n"),v("ul",[v("li",[e._v("beforRouteEnter(to, from, next)")]),e._v(" "),v("li",[e._v("beforRouteUpdate(to, from, next)")]),e._v(" "),v("li",[e._v("beforRouteLeave(to, from, next)")])])])]),e._v(" "),v("h2",{attrs:{id:"_2-2、vue-router-路由跳转方式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-2、vue-router-路由跳转方式"}},[e._v("#")]),e._v(" 2.2、Vue-router 路由跳转方式")]),e._v(" "),v("ul",[v("li",[e._v("$router.push  向history栈添加一个新的记录")]),e._v(" "),v("li",[e._v("$router.replace 替换掉当前history,不会再history添加新纪录")]),e._v(" "),v("li",[e._v("$router.go(n) 在history记录向前或向后多少步")])]),e._v(" "),v("h2",{attrs:{id:"_2-3、vue-router-路由传参方式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-3、vue-router-路由传参方式"}},[e._v("#")]),e._v(" 2.3、Vue-router 路由传参方式")]),e._v(" "),v("p",[e._v("Vue-router提供了 "),v("code",[e._v("params")]),e._v("、"),v("code",[e._v("query")]),e._v("、"),v("code",[e._v("meta")]),e._v(" 三种页面传参方式")]),e._v(" "),v("blockquote",[v("p",[e._v("query和params区别")])]),e._v(" "),v("ul",[v("li",[e._v("params是路由的一部分，所以传参需要在路由后面添加参数 /index/:id/:name，如果路由没有配置参数，页面刷新后参数会消失")]),e._v(" "),v("li",[e._v("params方式只能用name来引入路由，而query使用path和name都可以")]),e._v(" "),v("li",[e._v("params 方式不会再地址栏显示参数，query会在地址栏显示参数")])]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("// 不带参数\nthis.$router.push('index')\nthis.$router.push({path: 'index'})\nthis.$router.push({name: 'index'})\n// params 必须和name搭配使用\nthis.$router.push({name: 'index', params: {id: 1})\n// query\nthis.$router.push(name: 'index', query: {id: 1})\n// meta 路由元信息\nexport default new Router({\n  routers: [\n    {\n      path: '/index',\n      name: 'index',\n      component: Index,\n      meta: {id: 1}\n    }\n  ]\n})\n")])])]),v("h2",{attrs:{id:"_2-4-vue-router的-router和-route"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-vue-router的-router和-route"}},[e._v("#")]),e._v(" 2.4 Vue-router的$router和$route")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("$route")]),e._v(": 是路由信息对象，包括path、params、hash、query、fullPath、metched、name等路由信息参数")]),e._v(" "),v("li",[v("code",[e._v("$router")]),e._v(": 是路由实例，包括路由的跳转方法，钩子函数等")])]),e._v(" "),v("h2",{attrs:{id:"_2-5、vue-router路由懒加载"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-5、vue-router路由懒加载"}},[e._v("#")]),e._v(" 2.5、Vue-router路由懒加载")]),e._v(" "),v("p",[e._v("结合"),v("code",[e._v("Vue异步组件")]),e._v(" 和 "),v("code",[e._v("Webpack代码分割功能")]),e._v("实现路由懒加载")]),e._v(" "),v("ul",[v("li",[e._v("1、定义一个能被webpack自动代码分割的异步组件")])]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("const Index = () => import('/index')\n")])])]),v("ul",[v("li",[e._v("2、添加路由配置")])]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v(" const router = new VueRouter({\n  routers: [\n    { path: '/index', component: Index }\n  ]\n })\n")])])]),v("ul",[v("li",[e._v("3、在build/webpack.base.conf.js的output属性，添加chunkFilename")])]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("output: {\n  path: config.build.assetsRoot,\n  filename: '[name].js',\n  chunkFilename: '[name].js',\n  publicPath: process.env.NODE_ENV === 'production' ? config.build.assetsPublicPath : config.dev.assetsPublicPath\n}\n")])])]),v("h2",{attrs:{id:"_2-6、vue-router的hitstory和hash"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-6、vue-router的hitstory和hash"}},[e._v("#")]),e._v(" 2.6、Vue-router的hitstory和hash")]),e._v(" "),v("blockquote",[v("p",[e._v("hash 模式")])]),e._v(" "),v("p",[e._v("地址栏URL中的#符号，就是hash符号，叫哈希符，hash不会被包括在http请求中，对后端完全没有影响，因此改变hash不会重新加载页面"),v("br"),e._v("\nhash模式利用的是window.onhashchange事件，哈希值变化时会自动调用hashchange的监听事件，从而得到改变后的url，加载对应页面")]),e._v(" "),v("blockquote",[v("p",[e._v("history 模式")])]),e._v(" "),v("p",[e._v("history模式是利用HTML5的 "),v("code",[e._v("pushState")]),e._v("和 "),v("code",[e._v("replaceState")]),e._v(" 方法，用来完成URL跳转而无需重新加载页面，但需要服务器配置支持，否则刷新后不会停留在当前路由")]),e._v(" "),v("p",[e._v("pushState 和 replaceState只会导致浏览器history对象发生变化，从而改变当前地址栏的URL，但浏览器不会向后端发送请求，也不会触发popState事件的执行")]),e._v(" "),v("h2",{attrs:{id:"_3-1、vuex-是什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-1、vuex-是什么"}},[e._v("#")]),e._v(" 3.1、Vuex 是什么")]),e._v(" "),v("p",[e._v("vuex是一个专门为vue开发的状态管理器，采用集中式存储管理应用的所有组件的状态"),v("br"),e._v("\nvuex应用的核心是store仓库")]),e._v(" "),v("h2",{attrs:{id:"_3-2、vuex有哪些属性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-2、vuex有哪些属性"}},[e._v("#")]),e._v(" 3.2、vuex有哪些属性")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",[v("code",[e._v("- state: vuex的基本数据，用来存储数据\n- getter： 从state派生的数据，相当于state的计算属性\n- mutation: 提交更新数据的方法，同步的， fn(state,data)\n- action: 提交更新数据的方法，可以包含异步才做，提交的是mutation,而不是直接跟新state， fn({commit}, data)\n- modules: 模块化vuex\n- Vue里调用action用dispatch,mutation用commit\n")])])]),v("h2",{attrs:{id:"_3-3、action和mutation的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-3、action和mutation的区别"}},[e._v("#")]),e._v(" 3.3、action和mutation的区别")]),e._v(" "),v("ul",[v("li",[e._v("mutation: 更改vuex的store中的状态的唯一方法是提交mutation，而mutation是在回调函数里直接修改state值")]),e._v(" "),v("li",[e._v("action类似于mutation，不同在于action提交的是mutation，而不是直接更改state，而且可以包含异步操作")])]),e._v(" "),v("h2",{attrs:{id:"_3-4-vue响应式原理简述"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-vue响应式原理简述"}},[e._v("#")]),e._v(" 3.4 Vue响应式原理简述")]),e._v(" "),v("p",[e._v("Vue在初始化的时候，递归遍历data，通过 "),v("code",[e._v("definedProper")]),e._v("对数据进行 "),v("code",[e._v("set")]),e._v("和"),v("code",[e._v("get")]),e._v("绑定，"),v("br"),e._v("\n然后创建一个 "),v("code",[e._v("dep对象")]),e._v(", dep对象用于依赖收集，实现一个发布订阅的模式，实现data和渲染视图watcher的订阅，"),v("br"),e._v("\n当数据触发get查询时，会将当前的watcher对象加入到dep中，"),v("br"),e._v("\n当data变化的时候，会触发set通知所有用到这个data的watcher对象去触发生成新的DOM树，然后对比新旧DOM树，根据不同点去修改真实DOM树")]),e._v(" "),v("ul",[v("li",[e._v("在一个vue实例被创建的时候，data中的变量会被vue遍历property，并使用Object.property把这些property全部转换为getter/setter;getter/setter使用者是不可见的，当data中的数据发生变更和使用的时候会被调用。vue实例有watcher实例，用于监听data对象并收集数据property记录为依赖，然后调用setter和getter实现实例的重新渲染")])]),e._v(" "),v("h2",{attrs:{id:"_3-5-vue常用组件库"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-vue常用组件库"}},[e._v("#")]),e._v(" 3.5 Vue常用组件库")]),e._v(" "),v("p",[v("code",[e._v("vue-table")]),e._v(","),v("code",[e._v("vue-datepicker")]),e._v(","),v("code",[e._v("vue-progressbar")]),e._v(","),v("code",[e._v("vue-editor")]),e._v(","),v("code",[e._v("vue-lazyload-img")])]),e._v(" "),v("h2",{attrs:{id:"_3-6、keep-alive的原理-使用有什么问题-如何解决"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-6、keep-alive的原理-使用有什么问题-如何解决"}},[e._v("#")]),e._v(" 3.6、keep-alive的原理，使用有什么问题？如何解决？")]),e._v(" "),v("p",[e._v("在 created钩子函数调用时将需要缓存的 VNode 节点保存在 this.cache 中／在 render（页面渲染） 时，如果 VNode 的 name 符合缓存条件（可以用 include 以及 exclude 控制），则会从 this.cache 中取出之前缓存的 VNode实例进行渲染。")]),e._v(" "),v("h2",{attrs:{id:"_3-7、完整的导航守卫解析流程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-7、完整的导航守卫解析流程"}},[e._v("#")]),e._v(" 3.7、完整的导航守卫解析流程")]),e._v(" "),v("ul",[v("li",[e._v("导航被触发。")]),e._v(" "),v("li",[e._v("在失活的组件里调用 beforeRouteLeave 守卫。")]),e._v(" "),v("li",[e._v("调用全局的 beforeEach 守卫。")]),e._v(" "),v("li",[e._v("在重用的组件里调用 beforeRouteUpdate 守卫 (2.2+)。")]),e._v(" "),v("li",[e._v("在路由配置里调用 beforeEnter。")]),e._v(" "),v("li",[e._v("解析异步路由组件。")]),e._v(" "),v("li",[e._v("在被激活的组件里调用 beforeRouteEnter。")]),e._v(" "),v("li",[e._v("调用全局的 beforeResolve 守卫 (2.5+)。")]),e._v(" "),v("li",[e._v("导航被确认。")]),e._v(" "),v("li",[e._v("调用全局的 afterEach 钩子。")]),e._v(" "),v("li",[e._v("触发 DOM 更新。")]),e._v(" "),v("li",[e._v("调用 beforeRouteEnter 守卫中传给 next 的回调函数，创建好的组件实例会作为回调函数的参数传入")])])])}),[],!1,null,null,null);t.default=_.exports}}]);
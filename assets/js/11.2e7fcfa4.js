(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{575:function(a,e,t){"use strict";t.r(e);var _=t(5),l=Object(_.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"_1、webpack是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、webpack是什么"}},[a._v("#")]),a._v(" 1、webpack是什么")]),a._v(" "),t("ul",[t("li",[a._v("webpack是一个模块打包工具，可以管理项目中的模块依赖并且编译成所需的静态资源文件")])]),a._v(" "),t("h2",{attrs:{id:"_2、webpack的基本功能"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、webpack的基本功能"}},[a._v("#")]),a._v(" 2、webpack的基本功能")]),a._v(" "),t("ul",[t("li",[a._v("代码转换：typescript编译成javascript，scss编译成css等")]),a._v(" "),t("li",[a._v("文件优化：压缩js/css/html代码，压缩合成图片等")]),a._v(" "),t("li",[a._v("代码分割：提取多个页面的公共代码，提取首屏不需要执行的部分代码，使其异步加载")]),a._v(" "),t("li",[a._v("模块合并：在采用模块化的项目有很多模块和文件，把模块分类合并成一个文件")]),a._v(" "),t("li",[a._v("自动刷新：监听本地源代码的变化，自动构建并刷新浏览器")]),a._v(" "),t("li",[a._v("代码校验：在代码被提交到仓库前需要检测代码的规范性，或者单元测试是否通过")]),a._v(" "),t("li",[a._v("自动发布：更新完代码后，自动构建出线上发布代码并传输到发布系统")])]),a._v(" "),t("h2",{attrs:{id:"_3、webpack构建过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、webpack构建过程"}},[a._v("#")]),a._v(" 3、webpack构建过程")]),a._v(" "),t("ul",[t("li",[a._v("从entry里配置的module开始递归解析entry依赖的所有module")]),a._v(" "),t("li",[a._v("每到一个module，就会根据配置的loader去找对应的转换规则")]),a._v(" "),t("li",[a._v("对module进行转换后，再解析出当前module依赖的module")]),a._v(" "),t("li",[a._v("这些模块会以entry为单位分组，一个entry和其所有依赖的module被分到一个组chunk")]),a._v(" "),t("li",[a._v("最后webpack会把所有chunk转换成文件输出")]),a._v(" "),t("li",[a._v("在整个流程中webpack会在恰当的时机执行plugin里定义的逻辑")])]),a._v(" "),t("h2",{attrs:{id:"_4、打包原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、打包原理"}},[a._v("#")]),a._v(" 4、打包原理")]),a._v(" "),t("p",[a._v("将所有依赖打包成一个bundle.js，通过代码分割成单元片段按需加载")]),a._v(" "),t("h2",{attrs:{id:"_5、各目录的作用-entry-output等"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5、各目录的作用-entry-output等"}},[a._v("#")]),a._v(" 5、各目录的作用 entry/output等")]),a._v(" "),t("ul",[t("li",[a._v("entry:入口，告诉webpack要使用哪个模块作为构建项目的起点，默认是 ./src/index.js")]),a._v(" "),t("li",[a._v("output: 出口，告诉webpack在哪里输出它打包好的代码以及命名，默认是 ./dist")]),a._v(" "),t("li",[a._v("loader： 告诉webpack如何转换某一类型的文件，并且引入到打包出的文件中")]),a._v(" "),t("li",[a._v("plugins: 插件，可以打包优化、资源管理和注入环境变量")]),a._v(" "),t("li",[a._v("bundle: 打包出来的文件")]),a._v(" "),t("li",[a._v("chunk： 是webpack进行模块的依赖分析时，代码分割出来的代码块")]),a._v(" "),t("li",[a._v("module: 开发中的单个模块")])]),a._v(" "),t("h2",{attrs:{id:"_6、webpack如何配置单页面和多页面的应用程序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6、webpack如何配置单页面和多页面的应用程序"}},[a._v("#")]),a._v(" 6、webpack如何配置单页面和多页面的应用程序")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// 单页面\nmodule.exports = {\n  entry: './path/to/myentry/file.js'\n}\n// 多页面\nmodule.exports = {\n  entry: {\n    pageOne: './src/pageone/index.js',\n    pagetwo: './src/pagetwo/index.js'\n  }\n}\n")])])]),t("h2",{attrs:{id:"_7、常见的loader-转换的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7、常见的loader-转换的"}},[a._v("#")]),a._v(" 7、常见的loader(转换的)")]),a._v(" "),t("ul",[t("li",[a._v("file-loader: 把文件输出到一个文件夹中，在代码中通过相关路径去引用输出的文件")]),a._v(" "),t("li",[a._v("image-loader: 加载并压缩图片文件")]),a._v(" "),t("li",[a._v("babel-loader： 把es6转换为es5")]),a._v(" "),t("li",[a._v("css-loader: 加载css，支持模块化、压缩、文件导入等特性")]),a._v(" "),t("li",[a._v("style-loader: 把css代码注入到javascript中，通过dom操作去加载css")]),a._v(" "),t("li",[a._v("eslint-loader： 通过eslint检查js代码")])]),a._v(" "),t("h2",{attrs:{id:"_8、什么是模块热更新"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8、什么是模块热更新"}},[a._v("#")]),a._v(" 8、什么是模块热更新")]),a._v(" "),t("p",[a._v("webpack的一个功能，可以使代码修改后不用刷新浏览器就自动刷新")]),a._v(" "),t("h2",{attrs:{id:"_9、常见的plugins插件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9、常见的plugins插件"}},[a._v("#")]),a._v(" 9、常见的plugins插件")]),a._v(" "),t("ul",[t("li",[a._v("html-webpack-plugin: 压缩html")]),a._v(" "),t("li",[a._v("clean-webpack-plugin：去掉没有用到的模块")])]),a._v(" "),t("h2",{attrs:{id:"_10、什么是长缓存-在webpack中如何做到长缓存优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10、什么是长缓存-在webpack中如何做到长缓存优化"}},[a._v("#")]),a._v(" 10、什么是长缓存，在webpack中如何做到长缓存优化")]),a._v(" "),t("ul",[t("li",[a._v("浏览器在用户访问页面的时候，为了加快加载速度，会对用户访问的静态资源进行存储，但每一次代码更新需要浏览器下载最新的代码，一般是引入新的文件名称")]),a._v(" "),t("li",[a._v("webpack中可以在output中指定chunkhash，并且分离经常更新的代码，通过NameModulesPlugin或者HashedModulesPlugin使其再次打包文件名不变")])]),a._v(" "),t("h2",{attrs:{id:"_11、loader和plugin的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11、loader和plugin的区别"}},[a._v("#")]),a._v(" 11、loader和plugin的区别")]),a._v(" "),t("ul",[t("li",[a._v("1、loader是使webpack拥有加载和解析非js文件的能力")]),a._v(" "),t("li",[a._v("2、plugin可以拓展webpack的功能")])]),a._v(" "),t("h2",{attrs:{id:"_12、webpack和gulp、grunt的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_12、webpack和gulp、grunt的区别"}},[a._v("#")]),a._v(" 12、webpack和gulp、grunt的区别")]),a._v(" "),t("ul",[t("li",[a._v("grunt: 有大量现成的插件，封装了常见的任务，可以管理任务之间的依赖关系，自动化执行依赖的任务")]),a._v(" "),t("li",[a._v("gulp: 基于流的自动化构建工具，可以管理和执行任务，支持监听和读写文件")]),a._v(" "),t("li",[a._v("gulp和grunt是基于任务和流的，链式操作，一条链的操作构成一个任务，多个任务构成项目的构建流程，缺点是集成度不高，需要手动写很多配置才能用")]),a._v(" "),t("li",[a._v("webpack是基于入口的，会自动递归解析入口所需要加载的所以资源文件，然后用不同的loader来处理不同的文件，用plugin来拓展webpack功能")])])])}),[],!1,null,null,null);e.default=l.exports}}]);